链接：https://www.nowcoder.com/questionTerminal/7b2152a85b9a4ebab6dfda7e995a8491
来源：牛客网

方法重写的原则：

1. 重写方法的方法名称、参数列表必须与原方法的相同，返回类型可以相同也可以是原类型的子类型(从Java SE5开始支持)。
2. 重写方法不能比原方法访问性差（即访问权限不允许缩小）。
重写方法不能比原方法抛出更多的异常。
3.被重写的方法不能是final类型，因为final修饰的方法是无法重写的。
4. 被重写的方法不能为private，否则在其子类中只是新定义了一个方法，并没有对其进行重写。
5. 被重写的方法不能为static。如果父类中的方法为静态的，而子类中的方法不是静态的，但是两个方法除了这一点外其他都满足重写条件，那么会发生编译错误；反之亦然。即使父类和子类中的方法都是静态的，并且满足重写条件，但是仍然不会发生重写，因为静态方法是在编译的时候把静态方法和类的引用类型进行匹配。
6. 重写是发生在运行时的，因为编译期编译器不知道并且没办法确定该去调用哪个方法，JVM会在代码运行的时候作出决定。

方法重载的原则：

1. 方法名称必须相同。
2. 参数列表必须不同（个数不同、或类型不同、参数类型排列顺序不同等）。
4. 方法的返回类型可以相同也可以不相同。
5. 仅仅返回类型不同不足以成为方法的重载。
6. 重载是发生在编译时的，因为编译器可以根据参数的类型来选择使用哪个方法。

重写和重载的不同：

1. 方法重写要求参数列表必须一致，而方法重载要求参数列表必须不一致。
2. 方法重写要求返回类型必须一致(或为其子类型)，方法重载对此没有要求。
3. 方法重写只能用于子类重写父类的方法，方法重载用于同一个类中的所有方法。
4. 方法重写对方法的访问权限和抛出的异常有特殊的要求，而方法重载在这方面没有任何限制。
5. 父类的一个方法只能被子类重写一次，而一个方法可以在所有的类中可以被重载多次。
6. 重载是编译时多态，重写是运行时多态。
