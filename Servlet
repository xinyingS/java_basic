Servlet

reference from : https://www.nowcoder.com/questionTerminal/28d73700707a4bd0982c34303ec95178

1. 什么是Servlet？

   Servlet：
   (1). 处理客户端请求（表单提交的信息等）(2). 产生动态网页内容
   使用过程：初始化——service（分析客户端请求,比如是get还是post）——销毁，
           一个Servlet实例只会创建一次，重复调用的只是service过程。

2. 说一下Servlet的体系结构。

   所有的Servlet都必须要实现的核心的接口是javax.servlet.Servlet。每一个Servlet都必须要直接或者是间接实现这个接口，或者是继承javax.servlet.GenericServlet或者javax.servlet.http.HTTPServlet。
   最后，Servlet使用多线程可以并行的为多个请求服务。

3. Applet和Servlet有什么区别？

   (1) Applet是运行在客户端主机的浏览器上的客户端Java程序。而Servlet是运行在web服务器上的服务端的组件。
   (2) applet可以使用用户界面类，而Servlet没有用户界面，相反，Servlet是等待客户端的HTTP请求，然后为请求产生响应。

4. GenericServlet和HttpServlet有什么区别？

   GenericServlet类实现了Servlet和ServletConfig接口。实现了除了service()之外的其他方法，在创建Servlet对象时，可以继承GenericServlet类来简化程序的代码，但需要实现service()方法。
   HttpServlet类继承了GeneriServlet类，为实际开发中大多数用Servlet处理 HTTP请求的应用灵活的方法。

   (a). HttpServlet

    1). 是一个 Servlet, 继承自 GenericServlet. 针对于 HTTP 协议所定制.

    2). 在 service() 方法中直接把 ServletReuqest 和 ServletResponse 转为 HttpServletRequest 和 HttpServletResponse.
        并调用了重载的 service(HttpServletRequest, HttpServletResponse)

        在 service(HttpServletRequest, HttpServletResponse) 获取了请求方式: request.getMethod(). 根据请求方式有创建了
        doXxx() 方法(xxx 为具体的请求方式, 比如 doGet, doPost)

    3). 实际开发中, 直接继承 HttpServlet, 并根据请求方式复写 doXxx() 方法即可.

    4). 好处: 直接由针对性的覆盖 doXxx() 方法; 直接使用 HttpServletRequest 和 HttpServletResponse, 不再需要强转.

 
    (b).GenericServlet

     1). 是一个 Serlvet. 是 Servlet 接口和 ServletConfig 接口的实现类. 但是一个抽象类. 其中的 service 方法为抽象方法

     2). 如果新建的 Servlet 程序直接继承 GenericSerlvet 会使开发更简洁.

     3). 具体实现:

      ①. 在 GenericServlet 中声明了一个 SerlvetConfig 类型的成员变量, 在 init(ServletConfig) 方法中对其进行了初始化 
      ②. 利用 servletConfig 成员变量的方法实现了 ServletConfig 接口的方法
      ③. 还定义了一个 init() 方法, 在 init(SerlvetConfig) 方法中对其进行调用, 子类可以直接覆盖 init() 在其中实现对 Servlet 的初始化. 
      ④. 不建议直接覆盖 init(ServletConfig), 因为如果忘记编写 super.init(config); 而还是用了 SerlvetConfig 接口的方法,
          则会出现空指针异常. 
      ⑤. 新建的 init(){} 并非 Serlvet 的生命周期方法. 而 init(ServletConfig) 是生命周期相关的方法.

5. 解释下Servlet的生命周期。

   Servlet程序是由WEB服务器调用，web服务器收到客户端的Servlet访问请求后：
   ①Web服务器首先检查是否已经装载并创建了该Servlet的实例对象。如果是，则直接执行第④步，否则，执行第②步。
   ②装载并创建该Servlet的一个实例对象。 
   ③调用Servlet实例对象的init()方法。
   ④创建一个用于封装HTTP请求消息的HttpServletRequest对象和一个代表HTTP响应消息的HttpServletResponse对象，然后调用Servlet的service()方法并将请求和响应对象作为参数传递进去。
   ⑤WEB应用程序被停止或重新启动之前，Servlet引擎将卸载Servlet，并在卸载之前调用Servlet的destroy()方法。

6. doGet()方法和doPost()方法有什么区别？

   (1) doGet：GET方法会把名值对追加在请求的URL后面。因为URL对字符数目有限制，进而限制了用在客户端请求的参数值的数目。并且请求中的参数值是可见的，因此，敏感信息不能用这种方式传递。
   (2) doPOST：POST方法通过把请求参数值放在请求体中来克服GET方法的限制，因此，可以发送的参数的数目是没有限制的。最后，通过POST请求传递的敏感信息对外部客户端是不可见的。

7. 什么是Web应用程序？

   Web应用程序是一种可以通过Web访问的应用程序。Web应用程序的一个最大好处是用户很容易访问应用程序。用户只需要有浏览器即可，不需要再安装其他软件。
   一个Web应用程序是由完成特定任务的各种Web组件（web components)构成的并通过Web将服务展示给外界。在实际应用中，Web应用程序是由多个Servlet、JSP页面、HTML文件以及图像文件等组成。
   所有这些组件相互协调为用户提供一组完整的服务。

8. 什么是服务端包含(Server Side Include)？

   服务端包含(SSI)是一种简单的解释型服务端脚本语言，大多数时候仅用在Web上，用servlet标签嵌入进来。SSI最常用的场景把一个或多个文件包含到Web服务器的一个Web页面中。
   当浏览器访问Web页面的时候，Web服务器会用对应的servlet产生的文本来替换Web页面中的servlet标签。

9. 什么是Servlet链(Servlet Chaining)？

   Servlet链是把一个Servlet的输出发送给另一个Servlet的方法。第二个Servlet的输出可以发送给第三个Servlet，依次类推。
   链条上最后一个Servlet负责把响应发送给客户端。

10. 如何知道是哪一个客户端的机器正在请求你的Servlet？

    ServletRequest类可以找出客户端机器的IP地址或者是主机名。getRemoteAddr()方法获取客户端主机的IP地址，getRemoteHost()可以获取主机名。看下这里的例子。
