链接：https://www.nowcoder.com/questionTerminal/2a4902f67d5b49b6b4c05f9d7e422caf
     https://www.nowcoder.com/questionTerminal/95e4f9fa513c4ef5bd6344cc3819d3f7

1. 为什么集合类没有实现Cloneable和Serializable接口？

   克隆(cloning)或者是序列化(serialization)的语义和含义是跟具体的实现相关的。因此，应该由集合类的具体实现来决定如何被克隆或者是序列化。

   实现 Serializable接口的作用就是可以把对象存到字节流，然后可以恢复。所以你想如果你的对象没有序列化，怎么才能进行网络传输呢？
   要网络传输就得转为字节流，所以在分布式应用中，你就得实现序列化。如果你不需要分布式应用，那就没必要实现实现序列化。

2. 什么是迭代器(Iterator)？

   迭代器是一种设计模式，它是一个对象，它可以遍历并选择序列中的对象，而开发人员不需要了解该序列的底层结构。迭代器通常被称为“轻量级”对象，因为创建它的代价小。

　　Java中的Iterator功能比较简单，并且只能单向移动：

　　(1) 使用方法iterator()要求容器返回一个Iterator。第一次调用Iterator的next()方法时，它返回序列的第一个元素。注意：iterator()方法是java.lang.Iterable接口,被Collection继承。

　　(2) 使用next()获得序列中的下一个元素。

　　(3) 使用hasNext()检查序列中是否还有元素。

　　(4) 使用remove()将迭代器新返回的元素删除。

　　Iterator是Java迭代器最简单的实现，为List设计的ListIterator具有更多的功能，它可以从两个方向遍历List，也可以从List中插入和删除元素。

3. Iterator和ListIterator的区别是什么？

  (1) Iterator可用来遍历Set和List集合，但是ListIterator只能用来遍历List。
  (2) Iterator对集合只能是前向遍历，ListIterator既可以前向也可以后向。
  (3) ListIterator实现了Iterator接口，并包含其他的功能.

  Iterator<E>:
  (1) hasNext() -> boolean
  (2) next() -> E
  (3) remove() -> void

  ListIterator<E>:
  (1) hasNext() -> boolean
  (2) next() -> E
  (3) remove() -> void
  (4) add(E e) -> void
  (5) hasPrevious() -> boolean
  (6) nextIndex() -> int
  (7) previous() -> E
  (8) previousIndex() -> int
  (9) set(E e) -> void

4. 快速失败(fail-fast)和安全失败(fail-safe)的区别是什么？

   一：快速失败（fail—fast）

          在用迭代器遍历一个集合对象时，如果遍历过程中对集合对象的内容进行了修改（增加、删除、修改），则会抛出Concurrent Modification Exception。

          (1) 原理：迭代器在遍历时直接访问集合中的内容，并且在遍历过程中使用一个 modCount 变量。集合在被遍历期间如果内容发生变化，就会改变modCount的值。每当迭代器使用hashNext()/next()遍历下一个元素之前，都会检测modCount变量是否为expectedmodCount值，是的话就返回遍历；否则抛出异常，终止遍历。

          (2) 注意：这里异常的抛出条件是检测到 modCount！=expectedmodCount 这个条件。如果集合发生变化时修改modCount值刚好又设置为了expectedmodCount值，则异常不会抛出。因此，不能依赖于这个异常是否抛出而进行并发操作的编程，这个异常只建议用于检测并发修改的bug。

          (3) 场景：java.util包下的集合类都是快速失败的，不能在多线程下发生并发修改（迭代过程中被修改）。

    二：安全失败（fail—safe）

         采用安全失败机制的集合容器，在遍历时不是直接在集合内容上访问的，而是先复制原有集合内容，在拷贝的集合上进行遍历。

         (1) 原理：由于迭代时是对原集合的拷贝进行遍历，所以在遍历过程中对原集合所作的修改并不能被迭代器检测到，所以不会触发Concurrent Modification Exception。

         (2) 缺点：基于拷贝内容的优点是避免了Concurrent Modification Exception，但同样地，迭代器并不能访问到修改后的内容，即：迭代器遍历的是开始遍历那一刻拿到的集合拷贝，在遍历期间原集合发生的修改迭代器是不知道的。

         (3) 场景：java.util.concurrent包下的容器都是安全失败，可以在多线程下并发使用，并发修改。
